version: 1.0.0
#定义 SDK 客户端
client:
  # 客户端所属组织，必须是organization定义的组织
  organization: org2
  logging:
    # 打印日志等级
    level: info
  # MSP根目录 链接byfn网络时，指定为网络启动后生成的crypto-config文件夹
  cryptoconfig:
    path: /usr/local/hyper/fabric-ca/configtx
  # 某些SDK支持插件化的KV数据库，通过该属性实现
  credentialStore:
    # 可选，用于用户证书材料存储，如果所有的证书材料被嵌入到配置文件，则不需要
    path: "/tmp/examplestore"
#    cryptoStore:
#      # Specific to the underlying KeyValueStore that backs the crypto key store.
#      path: /tmp/msp

  # 客户端的BCCSP模块配置
  BCCSP:
    security:
      enabled: true
      default:
        provider: "SW"
      hashAlgorithm: "SHA2"
      softVerify: true
      level: 256

  tlsCerts:
    # 可选，当连接到peers，orderers时使用系统证书池，默认为false
    systemCertPool: true
    #  可选，客户端和peers与orderers进行TLS握手的密钥和证书
    client:
      # 使用byfn中User1@org1的证书
      keyfile: /usr/local/hyper/fabric-ca/org2/ca/crypto/ca-cert.pem
      certfile: /usr/local/hyper/fabric-ca/org2/ca/crypto/ca-cert.pem


# Fabric区块链网络中参与的组织列表
organizations:
  # 组织名
  org1:
    mspid: org1MSP
    # 组织的MSP存储位置，绝对路径或相对cryptoconfig的路径
    cryptoPath: /usr/local/soft/fabric-ca/org1/ca/crypto/msp

    # 组织中的节点
    peers:
      - peer1-org1

  org2:
    mspid: org2MSP
    cryptoPath: /usr/local/soft/fabric-ca/org2/ca/crypto/msp
    certificateAuthorities:
      - rca-org2
    peers:
      - peer1-org2
      - peer2-org2

  org0:
    mspID: org0MSP
    cryptoPath: /usr/local/soft/fabric-ca/org0/ca/crypto/msp

# 发送交易请求或通道创建、更新请求到的orderers列表
# 如果定义了超过一个orderer，SDK使用哪一个orderer由代码实现时指定
orderers:
  orderer1-org0:
    url: grpcs://192.168.175.140:17050

    # 以下属性由gRPC库定义，会被传递给gRPC客户端构造函数
    grpcOptions:
      # 下列参数用于设置服务器上的keepalive策略，不兼容的设置会导致连接关闭
      # 当keep-alive-time被设置为0或小于激活客户端的参数，下列参数失效
      ssl-target-name-override: orderer1-org0
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false

    tlsCACerts:
      #证书的绝对路径
      path: /usr/local/hyper/fabric-ca/org0/ca/crypto/ca-cert.pem
#peers必须指定Hyperledger Fabric区块链网络中所有peer节点的主机名和端口，可能会在其它地方引用，如channels，organizations等部分。
peers:
  peer1-org1:
    # 表明使用grpcs协议，设置IP和端口号，使用域名会无法连接
    # url: grpcs://peer0.org1.example.com:7051
    url: grpcs://192.168.175.140:17051

    grpcOptions:
      ssl-target-name-override: peer1-org1
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false
    tlsCACerts:
      path: /usr/local/hyper/fabric-ca/org1/ca/crypto/ca-cert.pem

  peer1-org2:
    url: grpcs://192.168.175.140:19051
    grpcOptions:
      ssl-target-name-override: peer1-org2
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false
    tlsCACerts:
      path: /usr/local/hyper/fabric-ca/org2/ca/crypto/ca-cert.pem

  peer2-org2:
    url: grpcs://192.168.175.140:10051
    grpcOptions:
      ssl-target-name-override: peer2-org2
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false
    tlsCACerts:
      path: /usr/local/hyper/fabric-ca/org2/ca/crypto/ca-cert.pem

entitymatchers:
  peer:
    - pattern: (\w*)peer1-org1(\w*)
      urlsubstitutionexp: grpcs://192.168.175.140:17051
      ssltargetoverrideurlsubstitutionexp: peer1-org1
      mappedhost: peer1-org1

    - pattern: (\w*)peer1-org2(\w*)
      urlsubstitutionexp: grpcs://192.168.175.140:19051
      ssltargetoverrideurlsubstitutionexp: peer1-org2
      mappedhost: peer1-org2

    - pattern: (\w*)peer2-org2(\w*)
      urlsubstitutionexp: grpcs://192.168.175.140:10051
      ssltargetoverrideurlsubstitutionexp: peer2-org2
      mappedhost: peer2-org2

  orderer:
    - pattern: (\w*)orderer1-org0(\w*)
      urlsubstitutionexp: 192.168.175.140:17050
      ssltargetoverrideurlsubstitutionexp: orderer1-org0
      mappedhost: orderer1-org0

certificateAuthorities:
  rca-org2:
    url: https://0.0.0.0:17055
    tlsCACerts:
      path: /usr/local/hyper/fabric-ca/org2/ca/crypto/ca-cert.pem
      client:
        key:
          path: /usr/local/hyper/fabric-ca/org2/admin/tls-msp/keystore/key.pem
        cert:
          path: /usr/local/hyper/fabric-ca/org2/admin/tls-msp/signcerts/cert.pem
    registrar:
      enrollId:  User10
      enrollSecret: "123456"
